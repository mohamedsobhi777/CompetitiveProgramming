#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 2e6 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, k;
int tri;
int trie[N][27];
int v[N * 27];
int ans;

void add(string &x)
{
        int cur = 0;
        for (int i = 0; i < (int)x.size(); ++i)
        {
                int j = x[i] - 'A';
                if (!trie[cur][j])
                        trie[cur][j] = ++tri;
                cur = trie[cur][j];
        }
        ++v[cur];
}

int solve(int x, int h = 0)
{
        int ret = v[x];

        for (int i = 0; i < 26; ++i)
        {
                if (trie[x][i])
                        ret += solve(trie[x][i], h + 1);
        }
        int j = ret / k;
        ans += j * h;
        return ret % k;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        int t;
        cin >> t;
        for (int tc = 1; tc <= t; ++tc)
        {
                ans = 0 ; 
                tri = 0 ; 
                memset(trie, 0, sizeof trie);
                memset(v, 0, sizeof v);
                cin >> n >> k;
                for (int i = 0; i < n; ++i)
                {
                        string x;
                        cin >> x;
                        add(x);
                }
                solve(0);
                cout << "Case #" << tc << ": " << ans << "\n";
        }
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
