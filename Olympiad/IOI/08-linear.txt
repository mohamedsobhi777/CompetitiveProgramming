
/*
        Problem : IOI 08-linear
        Link : https://oj.uz/problem/view/IOI08_linear_garden
        handle : Mohamed.Sobhy

        Solution : 
                let's change the given string into a binary string (L = 0 , P = 1)
                
                a binary string s is good if for any substring of s the following condition holds: 
                        - the absolute difference between the number of 1's and 0's is less than 3
                
                note : 
                        from now on, we will use "string" to refer to good binary strings, also 
                        a string x is less than a string y means it's lecographically smaller.

                we want to calculate the index of string x in the sorted list of all strings.

                we will calculate the number of strings strictly less than x and add 1 to get the index.
        
                let's calculate dp (index, diff , min_diff , max_diff) 
                        diff = number of 1's - number of 0's
                        min_diff = minimun diff so far
                        max_diff = maximum diff so far
                we can see that if (max_diff - min_diff > 2) then this is invalid string.

                we can also keep a boolean that tells if the prefix taken so far is strictly 
              smaller than the prefix string x, to make the transitions such that we don't calculate 
              a string that is not smaller than x.

              we need to calculate the dp row by row because of the strict memory limit.
        
*/
#include<bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 1e6 + 7 ; 
const ll inf = 2e18 ; 

// How interesting!

int n, mod,ans;

int dp[2][5][5][5] ; 
int pref_cur[N], prefA[N], prefB[N] ; 

string s ;

inline int add(int x, int y){return x + y >= mod ? x + y - mod : x + y ;}

int get(int i , int j , int k){
        if(abs(j - k) > 2)return 0 ; 
        return dp[1][i][j][k] ; 
}

int solve(int i , int cur ,int A , int B){
        if(abs(A - B) > 2)return dp[0][cur][A][B] = 0 ; 
        if(i == n)return dp[0][cur][A][B] = 1 ; 
        int ret = 0 ; 
        ret = add(ret , get(cur + 1, A , max(B , cur + 1) ) ) ; 
        ret = add(ret , get(cur - 1, min(A , cur - 1) , B ) ) ;

        return dp[0][cur][A][B] = ret; 
}

void shift(){
        for(int i = 0 ;i < 5 ;++ i){
                for(int j = 0 ;j < 5 ; ++ j){
                        for(int k = 0 ; k < 5 ;++ k){
                                dp[1][i][j][k] = dp[0][i][j][k] ;  
                                dp[0][i][j][k] = 0 ; 
                        }
                }
        }
}

int main(){
        ios_base::sync_with_stdio(0) ;
        cin.tie(0) ; 

        memset(dp , -1 , sizeof dp) ; 
        cin >> n >> mod >> s ; 

        for(int i = 0 ;i < n; ++ i){
                pref_cur[i] = (i ? pref_cur[i-1] : 0) + (s[i] == 'L' ? 1 : -1)  ; 
                prefA[i] = min( (i ? prefA[i-1] : (int)2) , pref_cur[i] + 2 ) ;
                prefB[i] = max( (i ? prefB[i-1] : 2) , pref_cur[i] + 2 ) ;  
        }

        for(int j = 0 ;j < 5; ++ j)
                for(int k = 0 ; k < 5 ; ++ k)
                        for(int r = 0 ; r < 5 ;++ r)
                                solve(n, j , k , r) ;
        shift() ;
        for(int i = n - 1; ~i; -- i){
                if(s[i] == 'P'){ // 0 
                        int a0 = (i?pref_cur[i-1]+3:3);
                        int A0 = (i?prefA[i-1]:2);
                        int B0 = (i?max( pref_cur[i-1] + 1 + 2 ,prefB[i-1]):3) ;
                        ans = add(ans, get( a0 , A0 , B0) ) ; 
                }
                
                for(int j = 0 ;j < 5 ; ++ j)
                        for(int k = 0 ; k < 5 ; ++ k)
                                for(int r = 0 ; r < 5 ;++ r){
                                        solve(0, j , k , r) ;
                                }
                shift() ; 

        }

        cout<< ++ ans % mod ; 
        return 0 ; 
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
