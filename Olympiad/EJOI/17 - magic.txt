#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 2e5 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n;
map<vector<int> , ll> dp;
ll occ[500];
string s; 
int vis[N] ; 
map<char,int> ch ; 

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        cin >> n;
        cin >> s;
        for(auto u : s) ch[u] =1 ; 
        ll ans = 0;
        dp[vector<int> (60,0)] ++ ;

        for (int i = 0; i < n; ++i)
        {
                occ[s[i]] ++ ;  
                int j = 0 ; 
                vector<int> dfs(60, 0);
                char ls = '0' ;
                for(auto u : ch){
                        if(ls != '0'){
                                dfs[j++] = occ[u.first] - occ[ls] ;
                        }
                        ls = u.first ; 
                }
                ans += dp[dfs]++ ; 
        }
        cout << ans % (int) 1000000007;
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
