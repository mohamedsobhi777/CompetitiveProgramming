#include<bits/stdc++.h>
#include<ext/rope> 

/*
#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")*/

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std ; 
using namespace __gnu_cxx ;

using ll = long long ; 
using ld = long double ; 

const int N = 2e5 + 7 , mod = 1e9 + 7 ; 
const ll inf = 2e18 ; 

// How interesting!

int n ; 
int a[N] ; 

int main(){
        ios_base::sync_with_stdio(0) ;
        cin.tie(0) ; 

        freopen("sleepy.in" , "r" , stdin) ; 
        freopen("sleepy.out" , "w" , stdout) ; 

        cin >> n; 
        rope<int> r (n , 0) ;
        for(int i = 0 ;i < n; ++ i){
                int x ; cin >> x ; 
                r.mutable_reference_at(i) = x ; 
        }
        a[n] = 1e9 ; 
        vector<int> ans ; 
        int sor = 1; 
        int k = 20 ; 
        while(sor < n && r[n - sor - 1] < r[n - sor])++sor; 
        while( sor < n  ){
                int i = n - 1; 
                int lo = n - sor , hi = n; 
                while(lo<=hi){
                        int mid = (lo + hi) >> 1;
                        if(r[mid] < r[0]){
                                lo = mid + 1; 
                        } else{
                                i = mid - 1;
                                hi = mid - 1; 
                        }
                }
                sor ++ ; 
                r.insert(i + 1 , r[0]) ; 
                r.erase(0 , 1) ; 
                ans.push_back(i) ; 
                while(sor < n && r[n - sor - 1] < r[n - sor])++sor; 
        }
        cout<< (int) ans.size() <<"\n" ; 
        for(int i = 0 ; i < (int) ans.size() ; ++ i){
                cout<< ans[i] ; 
                if(i < (int) ans.size() - 1)
                        cout<<" " ; 
        }
        return 0 ; 
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
