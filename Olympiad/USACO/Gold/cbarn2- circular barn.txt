#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 200 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, k;
int tr;
ll a[N];
ll dp[N * 2][N * 2][10];

ll solve(int i, int ls, int r)
{
        if (i == tr)
                return 0;
        ll ret = inf;
        if (~dp[i][ls][r])
                return dp[i][ls][r];
        if (r)
                ret = min(ret, solve(i + 1, i, r - 1));
        ret = min(ret, solve(i + 1, ls, r) + 1ll * (i - ls) * a[i]);
        return dp[i][ls][r] = ret;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("cbarn2.in", "r", stdin);
        freopen("cbarn2.out", "w", stdout);
        cin >> n >> k;
        for (int i = 0; i < n; ++i)
        {
                cin >> a[i];
                a[i + n] = a[i];
        }
        ll ans = inf;
        for (int i = 0; i < n; ++i)
        {
                tr = i + n;
                memset(dp, -1, sizeof dp);
                ans = min(ans, solve(i, i, k - 1));
        }
        cout << ans;
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
