#include <bits/stdc++.h>

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 2e5 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, m;
vector<int> adj[N];
int ans[N], a[N];
int fat[N], vis[N];
int cnt;

int find(int x)
{
        return fat[x] = (x == fat[x] ? x : find(fat[x]));
}

void link(int u, int v)
{
        u = find(u);
        v = find(v);
        if (u != v)
        {
                fat[u] = v;
                --cnt;
        }
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        freopen("closing.in", "r", stdin);
        freopen("closing.out", "w", stdout);
        cin >> n >> m;
        for (int i = 0; i < N; ++i)
                fat[i] = i;
        for (int i = 0; i < m; ++i)
        {
                int u, v;
                cin >> u >> v;
                adj[u].push_back(v);
                adj[v].push_back(u);
        }
        for (int i = 0; i < n; ++i)
                cin >> a[i];
        for (int i = n - 1; ~i; --i)
        {
                ++cnt;
                for (auto u : adj[a[i]])
                {
                        if (vis[u])
                        {
                                if (find(u) != find(a[i]))
                                        link(a[i], u);
                        }
                }
                ans[i] = (cnt == 1);

                vis[a[i]] = 1;
        }
        ans[0] = (cnt == 1);
        for (int i = 0; i < n; ++i)
                cout << (ans[i] ? "YES" : "NO") << "\n";
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
