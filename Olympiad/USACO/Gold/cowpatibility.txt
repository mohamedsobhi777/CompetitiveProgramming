#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

using namespace std;
using namespace __gnu_pbds;

#define vi vector<int>
#define vll vector<ll>
#define vii vector<pair<int, int>>
#define vvi vector<vi>
#define vvii vector<vii>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define loop(_) for (int __ = 0; __ < (_); ++__)
#define forn(i, n) for (int i = 0; i < n; ++i)
#define pb push_back
#define f first
#define s second
#define sz(_) ((int)_.size())
#define all(_) _.begin(), _.end()
#define uni(_) unique(_)
#define lb lower_bound
#define ub upper_bound
#define si set<int>
#define ms multiset<int>
#define qi queue<int>
#define pq prioriry_queue<int>
#define mi map<int, int>
#define inc(i, l, r) for (int i = l; i <= r; i++)
#define dec(i, l, r) for (int i = l; i >= r; i--)

using lll = __int128;
using ll = long long;
using ld = long double;

const int N = 1e6 + 7;
const ll mod = 1e9 + 7;
const ll inf = 2e18;

auto ra = [] {char *p = new char ; delete p ; return ll(p) ; };
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count() * (ra() | 1));
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> os;

int n;

int occ[N];
map<vi, int> dp;
int occ1[N];

void solve(vi &v, vi res, int x)
{
       if (x == 5)
       {
              assert(is_sorted(all(res)));
              if (sz(res) > 1)
                     dp[res]++;
              else if (sz(res) == 1)
                     occ1[res[0]]++;
              return;
       }
       solve(v, res, x + 1);
       res.pb(v[x]);
       solve(v, res, x + 1);
}

int main()
{
       ios_base::sync_with_stdio(0);
       cin.tie(0);
#ifndef ONLINE_JUDGE
       // freopen("in.in", "r", stdin);
#endif
       freopen("cowpatibility.in", "r", stdin);
       freopen("cowpatibility.out", "w", stdout);

       cin >> n;
       ll ans = 0;
       for (int i = 0; i < n; ++i)
       {
              vi a(5);
              for (auto &u : a)
                     cin >> u;
              sort(all(a));
              solve(a, {}, 0);
       }

       for (auto u : dp)
       {
              if (sz(u.f) & 1)
                     ans += 1ll * u.s * --u.s / 2;
              else
                     ans -= 1ll * u.s * --u.s / 2;
       }
       for (int i = 1; i < N; ++i)
              ans += 1ll * occ1[i] * --occ1[i] / 2;

       cout << 1ll * n * (n - 1) / 2 - ans;
       return 0;
}
