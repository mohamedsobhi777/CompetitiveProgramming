#include <bits/stdc++.h>

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 1e5 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, m, k;
string s;
int a[30][30];
int d[27][N];
int dp[N];

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("cowmbat.in", "r", stdin);
        freopen("cowmbat.out", "w", stdout);
        cin >> n >> m >> k;
        cin >> s;
        fill(dp, dp + n, 2e9);
        for (auto &u : s)
                u -= 'a';
        for (int i = 0; i < m; ++i)
        {
                for (int j = 0; j < m; ++j)
                {
                        cin >> a[i][j];
                }
        }
        for (int k = 0; k < m; ++k)
        {
                for (int i = 0; i < m; ++i)
                        for (int j = 0; j < m; ++j)
                                a[i][j] = min(a[i][j], a[i][k] + a[k][j]);
        }
        for (int j = 0; j < m; ++j)
        {
                for (int i = 0; i < n; ++i)
                {
                        d[j][i] = a[s[i]][j];
                        if (i)
                                d[j][i] += d[j][i - 1];
                }
        }
        vector<int> st(m + 1, 2e9);
        for (int i = k - 1; i < n; ++i)
        {
                int no = i - k + 1;
                for (int j = 0; j < m; ++j)
                {
                        int ncost = (no ? dp[no - 1] - d[j][no - 1] : 0);
                        st[j] = min(st[j], ncost);
                        dp[i] = min(dp[i], d[j][i] + st[j]);
                }
        }
        cout << dp[n - 1];
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
