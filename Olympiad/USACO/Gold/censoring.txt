#include <bits/stdc++.h>

using namespace std;

#define vi vector<int>
#define vll vector<ll>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define loop(_) for (int __ = 0; __ < (_); ++__)
#define pb push_back
#define f first
#define s second
#define sz(_) ((int)_.size())
#define all(_) _.begin(), _.end()
#define lb lower_bound
#define ub upper_bound

using ll = long long;
using ld = long double;

const ll mod = 1e9 + 7;

int n;
string st;

struct node
{
       int nxt[26], link, dep;
       bool leaf;
       node()
       {
              memset(nxt, 0, sizeof nxt);
              leaf = 0, dep = 0, link = -1;
       }
       int &operator[](int x)
       {
              return nxt[x];
       }
};
vector<node> aho(1);

void add(string x)
{
       int cur = 0;
       for (int j = 0; j < sz(x); ++j)
       {
              if (!aho[cur][x[j] - 'a'])
              {
                     aho[cur][x[j] - 'a'] = sz(aho);
                     aho.pb(node());
                     aho.back().dep = aho[cur].dep + 1;
              }
              cur = aho[cur][x[j] - 'a'];
       }
       aho[cur].leaf = 1;
}

void push_links()
{
       aho[0].link = 0;
       queue<int> qu;
       for (int j = 0; j < 26; ++j)
       {
              if (aho[0][j])
              {
                     aho[aho[0][j]].link = 0;
                     qu.push(aho[0][j]);
              }
       }
       while (sz(qu))
       {
              int tp = qu.front();
              qu.pop();
              for (int j = 0; j < 26; ++j)
              {
                     if (aho[tp][j])
                     {
                            int go = aho[tp].link;
                            while (go && !aho[go][j])
                            {
                                   go = aho[go].link;
                            }
                            aho[aho[tp][j]].link = aho[go][j];
                            qu.push(aho[tp][j]);
                     }
              }
       }
}

vector<int> atm;
vector<char> ans;
const int N = 2e5;
int dp[N][26];

int get(int x, int v)
{
       if (~dp[x][v])
              return dp[x][v];
       if (!x)
              return aho[x][v];
       if (aho[x][v])
              return dp[x][v] = aho[x][v];
       return dp[x][v] = get(aho[x].link, v);
}

void solve(string x)
{
       int cur = 0;
       atm.pb(0);
       for (int j = 0; j < sz(x); ++j)
       {
              cur = get(cur, x[j] - 'a');
              atm.pb(cur);
              ans.pb(x[j]);
              if (aho[cur].leaf)
              {
                     for (int i = 0; i < aho[cur].dep; ++i)
                     {
                            ans.pop_back();
                            atm.pop_back();
                     }
                     cur = atm.back();
              }
       }
}

int main()
{
       ios_base::sync_with_stdio(0);
       cin.tie(0);
#ifndef ONLINE_JUDGE
       // freopen("in.in", "r", stdin);
#endif
       memset(dp, -1, sizeof dp);
       freopen("censor.in", "r", stdin);
       freopen("censor.out", "w", stdout);
       cin >> st;
       cin >> n;
       for (int i = 0; i < n; ++i)
       {
              string x;
              cin >> x;
              add(x);
       }
       push_links();
       solve(st);
       for (auto u : ans)
              cout << u;
       return 0;
}
