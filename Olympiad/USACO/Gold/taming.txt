#include <bits/stdc++.h>

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 100 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n;
int a[N];
int dp[N][N];

int solve(int i, int r)
{
        if (i == n)
                return r ? 1e9 : 0;
        if (~dp[i][r])
                return dp[i][r];
        int ret = 1e9;
        int diff = 0;
        for (int j = i; j < n; ++j)
        {
                diff += (a[j] != j - i);
                ret = min(ret, diff + solve(j + 1, r - 1));
        }
        return dp[i][r] = ret;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        freopen("taming.in", "r", stdin);
        freopen("taming.out", "w", stdout);
        memset(dp, -1, sizeof dp);
        cin >> n;
        for (int i = 0; i < n; ++i)
                cin >> a[i];
        for (int i = 1; i <= n; ++i)
                cout << solve(0, i) << "\n";
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
