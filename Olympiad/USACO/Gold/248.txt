#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 250 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n;
int a[N];
int dp[N][N][60];

int solve(int l, int r, int v)
{
        if (v <= 0)
                return 0;
        if (~dp[l][r][v])
                return dp[l][r][v];
        if (l == r)
                return a[l] == v;
        int ret = 0;
        for (int i = l; i < r; ++i)
                ret |= (solve(l, i, v - 1) && solve(i + 1, r, v - 1));
        return dp[l][r][v] = ret;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("248.in", "r", stdin);
        freopen("248.out", "w", stdout);
        cin >> n;
        for (int i = 0; i < n; ++i)
                cin >> a[i];
        memset(dp, -1, sizeof dp);
        int ans = 0;
        for (int i = 0; i < n; ++i)
        {
                for (int j = i; j < n; ++j)
                {
                        for (int k = 1; k <= 60; ++k)
                        {
                                if (solve(i, j, k))
                                {
                                        ans = max(ans, k);
                                }
                        }
                }
        }
        cout << ans;

        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
