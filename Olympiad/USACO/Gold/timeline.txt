#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 1e5 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, m, c;
ll d[N];

vector<pii> adj[N];

void dijkstra()
{
        priority_queue<pair<ll, int>> q;
        q.push({0, 0});
        while (q.size())
        {
                ll dst = q.top().first;
                int node = q.top().second;
                q.pop();
                for (auto u : adj[node])
                {
                        if (dst + u.second > d[u.first])
                        {
                                d[u.first] = dst + u.second;
                                q.push({d[u.first], u.first});
                        }
                }
        }
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("timeline.in", "r", stdin);
        freopen("timeline.out", "w", stdout);
        cin >> n >> m >> c;
        for (int i = 0; i < n; ++i)
        {
                int x;
                cin >> x;
                adj[0].push_back({i + 1, x});
        }
        for (int i = 0; i < c; ++i)
        {
                int u, v, c;
                cin >> u >> v >> c;
                adj[u].push_back({v, c});
        }
        dijkstra();
        for (int i = 1; i <= n; ++i)
                cout << d[i] << "\n";

        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
