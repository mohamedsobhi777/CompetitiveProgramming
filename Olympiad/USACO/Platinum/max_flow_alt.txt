#include <bits/stdc++.h>

using namespace std;
#define vi vector<int>
#define pb push_back

const int N = 1e5 + 7;
const int rot = 150;

int n, m;
vi adj[N];
int jump[N];
int dep[N];
int up[N];
int val[N];
int lazy[N];

void dfs(int x, int p)
{
        dep[x] = dep[p] + 1 - (x == p);
        jump[x] = (dep[x] % rot == 0 ? p : jump[p]);
        up[x] = p;
        for (auto u : adj[x])
        {
                if (u == p)
                        continue;
                dfs(u, x);
        }
}

int lca(int u, int v)
{
        while (jump[u] != jump[v])
        {
                if (dep[u] < dep[v])
                        swap(u, v);
                u = jump[u];
        }
        while (u != v)
        {
                if (dep[u] < dep[v])
                        swap(u, v);
                u = up[u];
        }
        return u;
}

void apply(int x, int y)
{
        while (x != y)
        {
                ++val[x];
                x = up[x];
        }
        val[y]++;
}

void upd(int x, int y)
{
        while (jump[x] != jump[y] && (dep[x] + 1) % rot)
        {
                val[x]++;
                x = up[x];
        }
        while (jump[x] != jump[y])
        {
                lazy[x]++;
                x = jump[x];
        }
        apply(x, y);
}

void propgate()
{
        for (int i = 1; i <= n; ++i)
        {
                int ii = i;
                int v = lazy[i];
                while (ii != jump[i])
                {
                        val[ii] += v;
                        ii = up[ii];
                }
        }
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("maxflow.in", "r", stdin);
        freopen("maxflow.out", "w", stdout);
        cin >> n >> m;
        for (int i = 0; i < n - 1; ++i)
        {
                int u, v;
                cin >> u >> v;
                adj[u].pb(v);
                adj[v].pb(u);
        }
        dfs(1, 1);
        while (m--)
        {
                int u, v;
                cin >> u >> v;
                int L = lca(u, v);
                upd(u, L);
                upd(v, L);
                val[L]--;
        }
        propgate();
        cout << *max_element(val + 1, val + n + 1);
        return 0;
}
