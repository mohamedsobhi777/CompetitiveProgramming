#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

using namespace std;
using namespace __gnu_pbds;

#define vi vector<int>
#define vll vector<ll>
#define vii vector<pair<int, int>>
#define vvi vector<vi>
#define vvii vector<vii>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define loop(_) for (int __ = 0; __ < (_); ++__)
#define forn(i, n) for (int i = 0; i < n; ++i)
#define pb push_back
#define f first
#define s second
#define sz(_) ((int)_.size())
#define all(_) _.begin(), _.end()
#define uni(_) unique(_)
#define lb lower_bound
#define ub upper_bound
#define si set<int>
#define ms multiset<int>
#define qi queue<int>
#define pq prioriry_queue<int>
#define mi map<int, int>
#define inc(i, l, r) for (int i = l; i <= r; i++)
#define dec(i, l, r) for (int i = l; i >= r; i--)

using ll = long long;
using ld = long double;

const int N = 1e5 + 7;
const ll mod = 1e9 + 7;
const ll inf = 2e18;
const int rot = 150;

auto ra = [] {char *p = new char ; delete p ; return ll(p) ; };
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count() * (ra() | 1));
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> os;

int n, m;
vi adj[N];
int jump[N];
int dep[N];
int st[N], en[N], t;
int up[N][17];
int val[N];
int lazy[N];

bool upper(int u, int v) { return st[u] <= st[v] && en[u] >= en[v]; }

void dfs(int x, int p)
{
        dep[x] = dep[p] + 1 - (x == p);
        jump[x] = (dep[x] % rot == 0 ? p : jump[p]);
        st[x] = ++t;
        up[x][0] = p;
        for (int i = 1; i < 17; ++i)
                up[x][i] = up[up[x][i - 1]][i - 1];
        for (auto u : adj[x])
        {
                if (u == p)
                        continue;
                dfs(u, x);
        }
        en[x] = ++t;
}

int lca(int u, int v)
{
        if (upper(u, v))
                return u;
        if (upper(v, u))
                return v;
        for (int i = 16; ~i; --i)
        {
                if (!upper(up[u][i], v))
                        u = up[u][i];
        }
        return up[u][0];
}

void apply(int x, int y)
{
        while (x != y)
        {
                ++val[x];
                x = up[x][0];
        }
        val[y]++;
}

void upd(int x, int y)
{
        while (jump[x] != jump[y] && (dep[x] + 1) % rot)
        {
                val[x]++;
                x = up[x][0];
        }
        while (jump[x] != jump[y])
        {
                lazy[x]++;
                x = jump[x];
        }
        apply(x, y);
}

void propgate()
{
        for (int i = 1; i <= n; ++i)
        {
                int ii = i;
                int v = lazy[i];
                while (ii != jump[i])
                {
                        val[ii] += v;
                        ii = up[ii][0];
                }
        }
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        //freopen("in.in", "r", stdin);
        freopen("maxflow.in", "r", stdin);
        freopen("maxflow.out", "w", stdout);
        cin >> n >> m;
        for (int i = 0; i < n - 1; ++i)
        {
                int u, v;
                cin >> u >> v;
                adj[u].pb(v);
                adj[v].pb(u);
        }
        dfs(1, 1);
        while (m--)
        {
                int u, v;
                cin >> u >> v;
                int L = lca(u, v);
                upd(u, L);
                upd(v, L);
                val[L]--;
        }
        propgate();
        cout << *max_element(val + 1, val + n + 1);
        return 0;
}
