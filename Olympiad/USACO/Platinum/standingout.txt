#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define rep(a, b, c) for (int a = b; a < b; ++a)
#define all(x) begin(x), end(x)
#define sz(x) (int)x.size()

using namespace std;
using ll = long long;
using ld = long double;

const int N = 2e5 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n;
string s, t;

struct SuffixArray
{
        vector<int> sa, lcp;

        SuffixArray(vector<int> s = {})
        {
                if (s.size())
                        work(s);
        }
        void work(vector<int> s)
        {
                sa = suffix_array(s);
                lcp = lcp_array(sa, s);
        }

        vector<int> suffix_array(vector<int> S)
        {
                int sz = S.size();
                vector<int> sa(sz), classes(sz);
                for (int i = 0; i < sz; i++)
                {
                        sa[i] = sz - 1 - i;
                        classes[i] = S[i];
                }
                stable_sort(sa.begin(), sa.end(), [&S](int i, int j) {
                        return S[i] < S[j];
                });
                for (int len = 1; len < sz; len *= 2)
                {
                        vector<int> c(classes);
                        for (int i = 0; i < sz; i++)
                        {
                                bool same = i && sa[i - 1] + len < sz && c[sa[i]] == c[sa[i - 1]] && c[sa[i] + len / 2] == c[sa[i - 1] + len / 2];
                                classes[sa[i]] = same ? classes[sa[i - 1]] : i;
                        }
                        vector<int> cnt(sz), s(sa);
                        for (int i = 0; i < sz; i++)
                                cnt[i] = i;
                        for (int i = 0; i < sz; i++)
                        {
                                int s1 = s[i] - len;
                                if (s1 >= 0)
                                        sa[cnt[classes[s1]]++] = s1;
                        }
                }
                return sa;
        }
        vector<int> lcp_array(const vector<int> &sa, vector<int> S)
        {
                int sz = S.size();
                vector<int> rank(sz), lcp(sz - 1);
                for (int i = 0; i < sz; i++)
                        rank[sa[i]] = i;

                int pre = 0;
                for (int i = 0; i < sz; i++)
                {
                        if (rank[i] < sz - 1)
                        {
                                int j = sa[rank[i] + 1];
                                while (max(i, j) + pre < S.size() && S[i + pre] == S[j + pre])
                                        ++pre;
                                lcp[rank[i]] = pre;
                                if (pre > 0)
                                        --pre;
                        }
                }
                return lcp;
        }
} suf;

int L[N], R[N];

ll count_unique(SuffixArray &sf)
{
        return 1ll * sf.sa.size() * (sf.sa.size() + 1) / 2 - accumulate(sf.lcp.begin(), sf.lcp.end(), 0ll);
}

int gcp(int l, int r)
{
        int ret = 1e9;
        for (int i = l; i < r; ++i)
                ret = min(ret, suf.lcp[i]);
        return ret;
}

int lens[N] ; 
vector<int> delis ; 

int gid(int x){
        return lower_bound(delis.begin() , delis.end() , x) - delis.begin() ; 
}

ll tos[N] ; 

int table[N][18] ; 
int lg[N] ; 
vector<int> str ; 
void prep(){
        for(int i = 2;i < N ;++ i){
                lg[i] = lg[i / 2 ] + 1; 
        }
        int m = (int) str.size() ; 
        for(int i = 0 ;i + 1< m ; ++ i){
                table[i][0] = suf.lcp[i] ; 
        }
        for(int j = 1; j < 18 ; ++ j){
                for(int i = 0  ; i + (1<<j) <= m - 1; ++ i)
                        table[i][j] = min(table[i][j -1] , table[i + (1<<(j -1 ))][j - 1]) ;
        }
}

int get(int l , int r){
        int g = lg[r - l +1] ; 
        return min(table[l][g] , table[r - (1<<g) + 1][g]) ; 
}


int query(int l , int r){
        int ret = 1e9 ;
        if(l>=r)return 0 ;
        for(int i = l ; i < r ; ++ i)ret = min(ret , suf.lcp[i]) ; 
                return ret ; 
        return l >= r? 0 : get(l , r -1) ;
}

vector<int> poss[N] ; 

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("standingout.in" ,"r" , stdin) ; 
        freopen("standingout.out" , "w" , stdout) ;
        int t; cin >> t ; 
        srand(time(0)) ; 
        for(int i = 0 ;i < t ; ++ i){   
                string x ; cin >> x; 
                for(auto u :x)str.push_back(u) ; 
                        str.push_back(i + 400) ;
                lens[i] = (int) x.size() ;
                delis.push_back((int) str.size() - 1) ; 

        }
        suf.work(str) ; 
        prep() ; 
        L[suf.sa[0]] = -1 ; 
        for(int i = 1 ;i < (int) str.size() ; ++ i){
                if(gid(suf.sa[i]) == gid(suf.sa[i -1])){
                        L[i] = L[i - 1] ; 
                }else L[i] = i - 1 ;
        }

        for(int i = 0 ;i < (int) str.size() ; ++ i){
                if(str[suf.sa[i]] >= 'a' && str[suf.sa[i]]<='z')
                        poss[gid(suf.sa[i])].push_back(i) ; 
        }
        for(int i = 0 ;i < t ; ++ i){
                ll ans = 1ll * (lens[i]) * (lens[i] + 1) / 2ll ; 
                for(auto u : poss[i]){ 
                        int mx =0 ; 
                        mx = max(mx , query(L[u] , u)) ; 
                        for(int k = u ; k + 1< (int) str.size() ; ++ k){
                                if(gid(suf.sa[k + 1]) != i){
                                        mx = max(mx , query(u, k +1)) ; 
                                        break ;
                                }
                        }
                        if(u && gid(suf.sa[u -1])== i)mx = max(mx ,suf.lcp[u -1]) ; 
                        ans -= mx;
                }
                cout<< ans <<"\n" ;
        }
        return 0;
}
