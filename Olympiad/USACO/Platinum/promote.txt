
#include<bits/stdc++.h>


#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 1e5 + 7 , mod = 1e9 + 7 ; 
const int inf = N ; 
// How interesting!

int n ; 
vector<int> com, adj[N] ; 
int sz[N];  
int bit[N], a[N] , ans[N] ; 
int t ; 

void add(int x ,int del){
        for(;x<N;x+=x&-x)
                bit[x] += del ; 
}

int upto(int x){
        int ret = 0 ; 
        for(;x;x-=x&-x)
                ret+=bit[x] ; 
        return ret ; 
}

int get(int l , int r){
        return upto(r) - upto(l - 1) ;
}

void dfz(int x , int p){
        sz[x] = 1; 
        for(auto u: adj[x]){
                if(u == p)
                        continue ; 
                dfz(u , x) ; 
                sz[x] += sz[u] ; 
        }
        return ; 
}

void dfa(int x , int p , int del){
        add(a[x] , del) ; 
        for(auto u : adj[x]){
                if(u == p)
                        continue ; 
                dfa(u , x , del) ;
        }
}

int dfs(int x , int p , bool keep){

        int big = 0 ; 

        for(auto u : adj[x]){
                if(u == p)
                        continue ; 
                if(sz[u] > sz[big])
                        big = u ; 
        }

        for(auto u : adj[x]){
                if(u == big || u == p)
                        continue ; 
                dfs(u , x , 0) ; 
        }

        if(big){
                dfs(big , x , 1) ; 
        }

        add(a[x] , 1) ; 

        for(auto u : adj[x]){
                if(u == big || u == p)
                        continue; 
                dfa(u , x , 1) ; 
        }

        ans[x] = get(a[x] + 1, N - 1) ;

        if(!keep)
                dfa(x , p , -1) ;
}

int main(){
        ios_base::sync_with_stdio(0) ;
        cin.tie(0) ;
        freopen("promote.in" , "r" , stdin) ; 
        freopen("promote.out" , "w" , stdout) ;  
        //freopen("in.in" , "r" , stdin) ; 
        cin >> n; 
        com.resize(n) ; 
        for(int i = 1 ;i <= n;i ++ ){
                cin >> a[i] ; 
                com[i-1] = a[i] ; 
        }

        sort(com.begin() , com.end()) ;
        for(int i = 1 ;i <= n; ++ i)
                a[i] = lower_bound(com.begin() , com.end() , a[i] ) - com.begin() + 1; 

        for(int i = 2 ; i <= n; ++ i){
                int x ; cin >> x ;
                adj[i].push_back(x) ; 
                adj[x].push_back(i) ; 
        }
        dfz(1 , 1) ; 
        dfs(1 , 1 , 0) ; 
        for(int i = 1; i <= n; ++ i)
                cout<< ans[i] <<"\n" ; 
        return 0 ; 
}
