#include <bits/stdc++.h>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 2e5 + 7, mod = 1e9 + 7;
const ll inf = 2e18;
const int mx = 1e6 +7 ;
// How interesting!

int n;
vector<int> adj[mx];

struct segtree
{
        int tree[4 * mx];
        segtree()
        {
                memset(tree, 0, sizeof tree);
        }
        void update(int node, int L, int R, int ix, int v)
        {
                if (L == R)
                        return void(tree[node] += v);
                int mid = (L + R) >> 1;
                if (ix <= mid)
                        update(node * 2 + 1, L, mid, ix, v);
                else
                        update(node * 2 + 2, mid + 1, R, ix, v);
                tree[node] = tree[node * 2 + 1] + tree[node * 2 + 2];
        }
        void upd(int ix, int v) { update(0, 1, mx, ix, v); }
} t1, t2;

int solve(int node, int L, int R, int l1, int r1, int l2, int r2)
{
        if (L == R)
        {
                int v1 = t1.tree[node];
                int v2 = t2.tree[node];
                int q1 = max(max(l1 + v1, r1), max(l2 + v2, r2));
                int q2 = max(max(l1, r1 + v1), max(l2, r2 + v2));
                return min(q1, q2);
        }
        int mid = (L + R) >> 1;
        int ql1 = t1.tree[node * 2 + 1], ql2 = t2.tree[node * 2 + 1];
        int qr1 = t1.tree[node * 2 + 2], qr2 = t2.tree[node * 2 + 2];
        if (max(l1 + ql1, l2 + ql2) < max(r1 + qr1, r2 + qr2))
        {
                return solve(node * 2 + 2, mid + 1, R, l1 + ql1, r1, l2 + ql2, r2);
        }
        else
        {
                return solve(node * 2 + 1, L, mid, l1, r1 + qr1, l2, r2 + qr2);
        }
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        //freopen("in.in", "r", stdin);
        freopen("balancing.in", "r", stdin);
        freopen("balancing.out", "w", stdout);
        cin >> n;
        vector<int> v;
        for (int i = 0; i < n; ++i)
        {
                int x, y;
                cin >> x >> y;
                adj[x].push_back(y);
                t1.upd(y, 1);
        }

        int ans = 1e9;
        for (int i = 1; i < mx; i += 2)
        {
                for (auto u : adj[i])
                {
                        t1.upd(u, -1);
                        t2.upd(u, 1);
                }
                ans = min(ans, solve(0, 1, mx, 0, 0, 0, 0));
        }
        cout << ans;
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
