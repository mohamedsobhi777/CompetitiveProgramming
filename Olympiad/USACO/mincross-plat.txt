#include<bits/stdc++.h>

#define I inline void 

using ll = long long ; 
using ld = long double ; 

using namespace std ; 

const int N = 2e5 + 7 ; 

int n ;
int cows1[N] , cows2[N] ; 
int pos1[N] , pos2[N] ; 
int range[N] ; 

int bit[N] ; 

I add(int ix , int v){
	for(;ix < N ; ix+=ix&-ix)
		bit[ix]+=v ; 
}

ll upto(int x){
	ll ret = 0 ; 
	for(;x;x-=x&-x)
		ret+=bit[x] ; 
	return ret ; 
}

ll get(int l , int r){
	return upto(r) - upto(l -1) ; 
}

ll inv(int l , int r){
	memset(bit , 0 , sizeof bit) ; 
	ll ret = 0 ; 
	for(int i = r; i >=l ;i--){
		ret+=upto(range[i]); 
		add(range[i] , 1) ; 
	}
	return ret ; 
}

ll solve(){
	ll ret = inv(0 , n-1) ;
	ll best = ret ;  
	for(int i = 0 ; i < n ;i++){
		add(range[i], -1) ;
		ret-=upto(range[i]) ; 
		ret+=get(range[i] , N-1) ; 
		add(range[i] , 1) ; 
		best = min(best , ret) ;
	}
	return best ; 
}

int main(){	
	ios_base::sync_with_stdio(0) ; 
	cin.tie(0) ; 
	freopen("mincross.in" , "r" , stdin) ; 
	freopen("mincross.out" , "w" , stdout) ; 
	//freopen("in.in" , "r" , stdin) ; 

	cin >> n; 
	for(int i = 0 ;i < n ;i++){
		cin >> cows1[i] ; 
		pos1[cows1[i]] = i ; 
	}
	for(int i = 0; i< n ;i++){
		cin >> cows2[i] ; 
		pos2[cows2[i]] = i ; 
	}

	for(int i = 0 ;i < 2 * n ;i++){
		range[i] = 1 + pos2[cows1[i%n]] ; 
	}

	ll ans = 1e18 ; 

	ans = min(ans , solve()) ; 

	for(int i = 0 ;i < 2 * n ;i++){
		range[i] = 1 + pos1[cows2[i%n]] ; 
	}
	cout<< min(ans , solve()) ; 
	return 0 ; 

}
