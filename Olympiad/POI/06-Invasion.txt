#include <bits/stdc++.h>

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 600 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, m;
int sum[N][N];

struct pnt
{
        int x, y, w, j;
        bool p = 0;
        pnt() {}
        pnt(int _x, int _y, int _w, int _j)
        {
                x = _x;
                y = _y;
                w = _w;
                j = _j;
        }
        bool operator==(const pnt &rhs)
        {
                return x == rhs.x && y == rhs.y && w == rhs.w && p == rhs.p;
        }
};

vector<pnt> v, v2;

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        //freopen("in.in", "r", stdin);
        cin >> n;
        ll tot = 0;
        for (int i = 0; i < n; ++i)
        {
                int x, y;
                cin >> x >> y;
                v.push_back(pnt(x, y, 0, i));
                v2.push_back(pnt(x, y, 0, i));
        }
        cin >> m;
        for (int i = 0; i < m; ++i)
        {
                int x, y, z;
                cin >> x >> y >> z;
                v2.push_back(pnt(x, y, z, -1));
                tot += z;
        }
        ll ans = -inf;
        for (int i = 0; i < n; ++i)
        {
                sort(v2.begin(), v2.end(), [&](pnt &a, pnt &b) -> bool {
                        if (a.j == i)
                                return 1;
                        if (b.j == i)
                                return 0;
                        int temp = (a.x - v[i].x) * (b.y - v[i].y) - (a.y - v[i].y) * (b.x - v[i].x);
                        return (temp > 0 || (temp == 0 && a.j < b.j));
                        //return atan2(a.y - v[i].y, a.x - v[i].x) < atan2(b.y - v[i].y, b.x - v[i].x); don't use this
                });

                ll cur = 0;
                for (int j = 0; j < n + m; ++j)
                {
                        if (~v2[j].j)
                        {
                                sum[i][v2[j].j] = cur;
                        }
                        cur += v2[j].w;
                }
        }
        for (int i = 0; i < n; ++i)
        {
                for (int j = i + 1; j < n; ++j)
                {
                        for (int k = j + 1; k < n; ++k)
                        {
                                ans = max(ans, sum[i][j] + sum[j][k] + sum[k][i] - 2 * tot);
                        }
                }
        }
        cout << ans;
        return 0;
}
