/*
        Problem : POI 15-Trous
        Link : https://szkopul.edu.pl/problemset/problem/07Q0fFk7fU2TmGr6wpPeDCZj/site/?key=statement
        handle : mohamedsobhi777
        
        Solution : 
                let f[l,r] be the sum of values in the range of indices [l,r]

                using two pointers we can maintain the sum of the values in range [L,R],
                we will also maintain a set S of values f[i-d+1,i] for all such that L <= i-d+1 <=i <= R 
                and the value of some range [L,R] equals { 0 if R - L + 1 <= k,
                                                           f[L,R] - max element in S}

                we can use some monotonic queue to maintain the minimum in the multiset in the 
                multiset.

        O(N)
        
*/
#include<bits/stdc++.h>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 2e6 + 7 , mod = 1e9 + 7 ; 
const ll inf = 2e18 ; 

// How interesting!

ll n ,m , k ; 
int a[N] ; 
ll pref[N] ; 
ll mag[N] ; 

int L = 0 , R = 0 ; 
deque<pair<ll,ll> > dq ; 

void push(ll x){
        while(dq.size() && dq.front().first >= x){
                dq.pop_front() ; 
        }
        dq.push_front({x , R ++}) ; 
}

void pop(){
        if(dq.back().second == L)
                dq.pop_back() ;
        L++ ; 
}

ll gmx(){
        if(dq.size())return dq.back().first ; 
        return 0 ; 
}

int main(){
        ios_base::sync_with_stdio(0) ;
        cin.tie(0) ; 
        
        cin >> n >> m >> k ; 
        for(int i = 0 ;i < n; ++ i){
                cin >> a[i] ;
                pref[i] = a[i] + (i ? pref[i-1] : 0) ;
        }
        mag[k-1] = pref[k-1] ;
        for(int i = k ; i < n; ++ i)mag[i] = pref[i] - pref[i-k] ; 

        int l = 0 ; 
        ll sum = 0 ; 
        int ans = k ; 
        multiset<ll> mu ; 
        ll lrg = 0 ; 
        for(int i = 0 ;i < n; ++ i){
                sum += a[i] ;
                if(i-l+1>=k)push(-mag[i]) ; 
                while(sum + gmx() > m && i - l + 1 > k){
                        if(i-l+1>=k)pop() ; 
                        sum-=a[l++] ; 
                }
                ans = max(ans , i - l + 1) ;
        }

        cout<< ans ;
        return 0 ; 
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/ 
