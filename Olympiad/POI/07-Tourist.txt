/*

	Problem : POI 07-Tourist
	Link : https://csacademy.com/contest/ceoi-2018-day-1/task/cloud-computing/
	handle : mohamedsobhi777

	Solution : 
		https://github.com/nikolapesic2802/Programming-Practice/blob/master/Tourist/main.cpp


*/
#include<bits/stdc++.h>

/*
#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")*/

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 2e4 + 7 , mod = 1e9 + 7 ; 
const int inf = 1e9 ; 
// How interesting!

int n , m ,k ;
vector<pair<int,int> > adj[N] ;
int d[N] ;
int fin[22] ; 
int ad[22][22] ; 
int pins[22] ; 

I dijkstra(int src){
	for(int i = 0 ;i < N ;i++)
		d[i] = -1 ; 

	d[src] = 0 ; 
	priority_queue<pair<int,int> > q ; 
	q.push({0 , src}) ; 
	while(q.size()){
		int dst = -q.top().first ;
		int node = q.top().second ; 
		q.pop() ; 
		if(dst != d[node])
			continue ;
		for(auto u : adj[node]){
			if(dst + u.second < d[u.first] || d[u.first] == -1){
				d[u.first] = dst + u.second ; 
				q.push({-d[u.first] , u.first}) ;
			}
		}
	}
	for(int i = 1 ;i <= k + 1; i++)
		ad[src][i] = d[i] ; 
	fin[src] = d[n] ; 
}
int cmask(int mask , int idx)
{
	int maskk = (1 << idx) - 1 ;
	int now = mask & maskk ;
	mask >>= (idx+1) ;
	mask <<= idx ;
	mask += now ;
	if(mask&(1<<idx))
		mask^=(1<<idx) ;
	return mask ;
}

int dp[20][1<<19] ; 

int solve(short x , int mask){
	if(mask == (1<<k) - 1 ){
		return fin[x] ; 
	}
	int amask = cmask(mask , x - 2) ;
	if(x > 1){
		if(~dp[x - 2][amask])
			return dp[x - 2][amask] ; 
	}
	int ret = inf ; 

	for(int i = 2 ;i <= k + 1;i ++){
		int r = i - 2 ; 
		if(mask&(1<<r))
			continue ; 
		if( (mask&pins[i]) == pins[i] ){
			ret = min(ret , solve(i , (mask^(1<<r))) + ad[x][i] ) ;
		}
	}
	if(x > 1)
		return dp[x - 2][amask] = ret ; 
	else
		return ret ; 
}

int main(){
	ios_base::sync_with_stdio(0) ; 
	cin.tie(0) ;
	memset(dp , -1 , sizeof dp) ;
	//freopen("in.in" , "r" , stdin) ;

	cin >> n >> m >> k ; 

	for(int i = 0 ;i < m ;i ++){
		int u , v ,c ; 
		cin >> u >> v >> c ;
		adj[u].push_back({v , c}) ;
		adj[v].push_back({u , c}) ; 
	}

	for(int i = 1 ;i <= k + 1 ; i ++){
		dijkstra(i) ;
	}

	int t ; 
	cin >> t ; 
	while(t -- ){
		int u , v; 
		cin >> u >> v ;
		pins[v] |= (1<<( u - 2 )) ; 
	}
	cout<< solve(1 , 0) ; 
	return 0 ; 
}


