#include <bits/stdc++.h>

using namespace std;

#define vi vector<int>
#define vll vector<ll>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define loop(_) for (int __ = 0; __ < (_); ++__)
#define pb push_back
#define f first
#define s second
#define sz(_) ((int)_.size())
#define all(_) _.begin(), _.end()
#define lb lower_bound
#define ub upper_bound

using ll = long long;
using ld = long double;

const int N = (1 << 19);
const ll mod = 1e9 + 7;

ll L, n;
ll vs[N], ms[N];
ll ans[N];

struct lazyTree
{
       ll tree[N * 4], lazy[4 * N];
       lazyTree()
       {
              memset(tree, 0, sizeof tree);
              memset(lazy, 0, sizeof lazy);
       }

       void push(int node, int L, int R)
       {
              if (lazy[node])
              {
                     tree[node] += 1ll * (R - L + 1) * lazy[node];
                     if (L != R)
                     {
                            lazy[node * 2] += lazy[node];
                            lazy[node * 2 + 1] += lazy[node];
                     }
                     lazy[node] = 0;
              }
       }

       void pull(int node)
       {
              tree[node] = tree[node * 2] + tree[node * 2 + 1];
       }

       void update(int l, int r, ll v, int node = 1, int L = 0, int R = N - 1)
       {
              push(node, L, R);
              if (l > R || r < L)
                     return;
              if (L >= l && R <= r)
              {
                     lazy[node] += v;
                     return void(push(node, L, R));
              }
              int mid = (L + R) >> 1;
              update(l, r, v, node * 2, L, mid);
              update(l, r, v, node * 2 + 1, mid + 1, R);
              pull(node);
       }

       ll query(int l, int r, int node = 1, int L = 0, int R = N - 1)
       {
              push(node, L, R);
              if (l > R || r < L)
                     return 0;
              if (L >= l && R <= r)
                     return tree[node];
              int mid = (L + R) >> 1;
              return query(l, r, node * 2, L, mid) + query(l, r, node * 2 + 1, mid + 1, R);
       }
} t3;

struct verylazyTree
{
       ll tree[(N * 4)], lazy[4 * N];
       verylazyTree()
       {
              memset(tree, 0, sizeof tree);
              memset(lazy, 0, sizeof lazy);
       }

       void push(int node, int L, int R)
       {
              if (lazy[node])
              {
                     auto get = [&](int x) -> ll {
                            return 1ll * x * ++x / 2ll;
                     };
                     tree[node] += 1ll * (get(R) - get(L - 1)) * lazy[node];
                     if (L != R)
                     {
                            lazy[node * 2] += lazy[node];
                            lazy[node * 2 + 1] += lazy[node];
                     }
                     lazy[node] = 0;
              }
       }

       void pull(int node)
       {
              tree[node] = tree[node * 2] + tree[node * 2 + 1];
       }

       void update(int l, int r, ll v, int node = 1, int L = 0, int R = N - 1)
       {
              push(node, L, R);
              if (l > R || r < L)
                     return;
              if (L >= l && R <= r)
              {
                     lazy[node] += v;
                     return void(push(node, L, R));
              }
              int mid = (L + R) >> 1;
              update(l, r, v, node * 2, L, mid);
              update(l, r, v, node * 2 + 1, mid + 1, R);
              pull(node);
       }

       ll query(int l, int r, int node = 1, int L = 0, int R = N - 1)
       {
              push(node, L, R);
              if (l > R || r < L)
                     return 0;
              if (L >= l && R <= r)
                     return tree[node];
              int mid = (L + R) >> 1;
              return query(l, r, node * 2, L, mid) + query(l, r, node * 2 + 1, mid + 1, R);
       }
} tee3;

void addF(ll l, ll r, ll x, ll d)
{
       r = min(r, L);
       x += max(0ll, (ll)1 - l) * d;
       l = max(1ll, l);
       t3.update(l, r, x - d * l);
       tee3.update(l, r, d);
}

void add(int x, ll v, ll m, ll d)
{
       t3.update(x, x, 1ll * d * v);
       int dst = v / m;
       addF(x - dst, x - 1, d * (v - dst * m), m * d);
       addF(x + 1, x + dst, d * (v - m), -m * d);
}

ll query(int l, int r)
{
       ll ret = t3.query(l, r) + tee3.query(l, r);
       return ret / (r - l + 1);
}

int main()
{
       ios_base::sync_with_stdio(0);
       cin.tie(0);
#ifndef ONLINE_JUDGE
       // freopen("in.in", "r", stdin);
#endif
       cin >> L >> n;

       for (int i = 0; i < n; ++i)
       {
              char c;
              cin >> c;
              if (c == 'P')
              {
                     ll x, v, m;
                     cin >> x >> v >> m;
                     vs[x] = v;
                     ms[x] = m;
                     add(x, v, m, 1);
              }
              else if (c == 'U')
              {
                     ll x;
                     cin >> x;
                     add(x, vs[x], ms[x], -1);
                     vs[x] = ms[x] = 0;
              }
              else
              {
                     ll l, r;
                     cin >> l >> r;
                     cout << query(l, r) << "\n";
              }
       }
       return 0;
}
