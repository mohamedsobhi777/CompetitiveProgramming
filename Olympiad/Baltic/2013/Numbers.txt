#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")

using namespace std;
using namespace __gnu_pbds;

#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define loop(_) for (int __ = 0; __ < (_); ++__)
#define forn(i, n) for (int i = 0; i < n; ++i)
#define pb push_back
#define f first
#define s second
#define sz(_) ((int)_.size())
#define all(_) _.begin(), _.end()
#define uni(_) unique(_)
#define lb lower_bound
#define ub upper_bound
#define si set<int>
#define ms multiset<int>
#define qi queue<int>
#define pq prioriry_queue<int>

using ll = long long;
using ld = long double;

const int N = 1e5 + 7000;
const ll mod = 1e9 + 7;
const ll inf = 2e18;

auto ra = [] {char *p = new char ; delete p ; return ll(p) ; };
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count() * (ra() | 1));
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> os;

int n;

ll dp[20][12][12][2][2];

ll solve(string &str, int i, int fr, int sc, bool res, bool noz)
{
        if (i == sz(str))
                return 1;
        if (~dp[i][fr][sc][res][noz])
                return dp[i][fr][sc][res][noz];
        ll ret = 0;
        for (int j = 0; j < (res ? str[i] - '0' + 1 : 10); ++j)
        {
                bool nflag = (res && j == str[i] - '0');
                if (j + 1 == sc || j + 1 == fr)
                        continue;
                ret += solve(str, i + 1, sc, (noz && j == 0 ? 0 : j + 1), nflag, (noz && !j));
        }
        return dp[i][fr][sc][res][noz] = ret;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        //freopen("in.in", "r", stdin);
        memset(dp, -1, sizeof dp);
        ll lo, hi;
        cin >> lo >> hi;
        string a = to_string(--lo), b = to_string(hi);
        ll ans = solve(b, 0, 0, 0, 1, 1);
        memset(dp, -1, sizeof dp);
        ans -= solve(a, 0, 0, 0, 1, 1);
        cout << ans;
        return 0;
}
