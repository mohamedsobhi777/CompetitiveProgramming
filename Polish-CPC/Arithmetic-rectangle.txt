#include <bits/stdc++.h>

#define I inline void
#define S struct
#define vi vector<int>
#define vii vector<pair<int, int>>
#define pii pair<int, int>
#define pll pair<ll, ll>

using namespace std;
using ll = long long;
using ld = long double;

const int N = 3000 + 7, mod = 1e9 + 7;
const ll inf = 2e18;

// How interesting!

int n, m;
int a[N][N];
int box[N][N];
int hist[N];
int ix;
stack<pii> stk;

int poop(int pos)
{
        ix = stk.top().first;
        int val = stk.top().second;
        stk.pop();
        if (val && pos - ix)
                return (pos - ix + 2) * (val + 2);
        return 0;
}

int histo()
{
        int ret = 0;
        for (int i = 0; i < m - 2; ++i)
        {
                bool mx = 0;
                while (stk.size() && hist[i] < stk.top().second)
                {
                        mx = 1;
                        ret = max(ret, poop(i));
                }

                stk.push({(mx ? ix : i), hist[i]});
        }
        while (stk.size())
                ret = max(ret, poop(m - 2));
        return ret;
}

int max_box()
{
        for (int i = 0; i < m - 2; ++i)
                hist[i] = 0;
        int ret = 0;
        for (int i = 0; i < n - 2; ++i)
        {
                for (int j = 0; j < m - 2; ++j)
                {
                        hist[j] += (box[i][j] == 1 ? 1 : -hist[j]);
                }
                ret = max(ret, histo());
        }
        return ret;
}

bool can(int i, int j)
{
        bool ret = 1;
        ret &= (a[i][j - 1] * 2 == a[i][j - 2] + a[i][j]);
        ret &= (a[i - 1][j - 1] * 2 == a[i - 1][j - 2] + a[i - 1][j]);
        ret &= (a[i - 2][j - 1] * 2 == a[i - 2][j - 2] + a[i - 2][j]);

        ret &= (a[i - 1][j] * 2 == a[i - 2][j] + a[i][j]);
        ret &= (a[i - 1][j - 1] * 2 == a[i - 2][j - 1] + a[i][j - 1]);
        ret &= (a[i - 1][j - 2] * 2 == a[i - 2][j - 2] + a[i][j - 2]);
        return ret;
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        //freopen("in.in", "r", stdin);
        int t;
        cin >> t;
        while (t--)
        {
                int ans = 1;
                cin >> n >> m;
                if (n > 1 && m > 1)
                        ans = 4;
                else if (n > 1)
                        ans = 2;
                else if (m > 1)
                        ans = 2;
                for (int i = 0; i < n; ++i)
                {
                        for (int j = 0; j < m; ++j)
                        {
                                cin >> a[i][j];
                                if (i > 1 && j > 1)
                                        box[i - 2][j - 2] = can(i, j);
                        }
                }
                for (int i = 0; i < n; ++i)
                {
                        int ls = a[i][1] - a[i][0];
                        int cnt = 1;
                        for (int j = 2; j < m; ++j)
                        {
                                int v = a[i][j] - a[i][j - 1];
                                if (v == ls)
                                        ++cnt;
                                else
                                        cnt = 1;
                                ans = max(ans, cnt + 1);
                                ls = v;
                        }
                }
                for (int j = 0; j < m; ++j)
                {
                        int cnt = 1, ls = a[1][j] - a[0][j];
                        for (int i = 2; i < n; ++i)
                        {
                                int v = a[i][j] - a[i - 1][j];
                                if (v == ls)
                                        ++cnt;
                                else
                                        cnt = 1;
                                ls = v;
                                ans = max(ans, cnt + 1);
                        }
                }
                for (int i = 0; i < n - 1; ++i)
                {
                        int ls1 = a[i][1] - a[i][0], ls2 = a[i + 1][1] - a[i + 1][0];
                        int cnt = 1;
                        for (int j = 2; j < m; ++j)
                        {
                                int v1 = a[i][j] - a[i][j - 1];
                                int v2 = a[i + 1][j] - a[i + 1][j - 1];
                                if (v1 == ls1 && v2 == ls2)
                                        ++cnt;
                                else
                                        cnt = 1;
                                ls1 = v1, ls2 = v2;
                                ans = max(ans, 2 * (cnt + 1));
                        }
                }
                for (int j = 0; j < m - 1; ++j)
                {
                        int ls1 = a[1][j] - a[0][j], ls2 = a[1][j + 1] - a[0][j + 1], cnt = 1;
                        for (int i = 2; i < n; ++i)
                        {
                                int v1 = a[i][j] - a[i - 1][j];
                                int v2 = a[i][j + 1] - a[i - 1][j + 1];
                                if (ls1 == v1 && ls2 == v2)
                                        ++cnt;
                                else
                                        cnt = 1;
                                ls1 = v1, ls2 = v2;
                                ans = max(ans, 2 * (cnt + 1));
                        }
                }

                cout << max(ans, max_box()) << "\n";
        }
        return 0;
}

/*
        - bounds sir (segtree = 4N, eulerTour = 2N, ...)
        - a variable defined twice?
        - will overflow?
        - is it a good complexity?
        - don't mess up indices (0-indexed vs 1-indexed)
        - reset everything between testcases. 
*/
