#include<bits/stdc++.h>

/*
#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")*/

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 1e5 + 7 , mod = 1e9 + 7 ; 
const int inf = N ; 
// How interesting!

int n, m ; 
vector<int> adj[N], ceno[N]; 
bool dead[N];
int sz[N], prv[N] ;
int dep[N] ;
int hei[N] ;
int up[N][20] ; 
int st[N] , en[N] ; 
int tim, ons ; 
int col[N] ; 
multiset<int> muls[N] ; 

I dfz(int x ,int p){
        sz[x] = 1 ;
        up[x][0] = p ;
        st[x] = ++ tim ; 
        if(x == p){
                hei[x] = 0 ; 
        }
        else{
                hei[x] = hei[p] + 1;
        }
        for(int i = 1;i < 20 ;i++){
                up[x][i] = up[up[x][i-1]][i-1] ;
        }


        for(auto u : adj[x]){
                if(u == p || dead[u])
                        continue ;
                dfz(u , x) ; 
                sz[x] += sz[u] ; 
        }
        en[x] = ++ tim ; 
}

int troid(int x, int p, int siz){
        for(auto u : adj[x]){
                if(u == p || dead[u])
                        continue ; 
                if(sz[u] > siz / 2)
                        return troid(u , x , siz) ; 
        }
        return x; 
}

I center(int x, int p = 0 ){
        dfz(x , x) ;
        int c = troid(x , x, sz[x] ) ; 
        dead[c] = 1; 
        if(p){
                prv[c] = p ;
                ceno[p].push_back(c) ; 
                ceno[c].push_back(p) ;
        }
        for(auto u : adj[c]){
                if(dead[u])
                        continue ; 
                center(u, c) ;
        }
}

bool upper(int u , int v){
        return st[u] <= st[v] && en[v] <= en[u] ; 
}

int lca(int u , int v){
        if(upper(u , v))
                return u ;
        if(upper(v , u))
                return v ; 
        for(int i = 19 ; ~i ; -- i){
                if(!upper(up[u][i],v))
                        u = up[u][i] ; 
        }
        return up[u][0] ; 
}

int dist(int u , int v){
        int lc = lca(u , v) ; 
        return hei[u] + hei[v] - 2 * hei[lc] ;
}

I paint(int x, int d){
        int tmp = x; 
        while( x != -1){
                if(d == 1){
                        muls[x].insert(dist(x , tmp)) ; 
                }else{
                        muls[x].erase(muls[x].find(dist(x , tmp))) ; 
                }
                x = prv[x] ; 
        }
}

int query(int x){
        int tmp = x ; 
        int ret = (*muls[x].begin()) ; 
        while(x!= -1){
                ret = min(ret , (*muls[x].begin()) + dist(x , tmp)) ; 
                x = prv[x] ;
        }
        return ret ;
}

int main(){
        //freopen("in.in" , "r" , stdin) ; 
        scanf("%d" , &n) ; 
        memset(prv , -1 , sizeof prv) ; 
        for(int i = 0 ;i < n - 1;i++){
                int u , v ; 
                scanf("%d%d" , &u , &v) ; 
                adj[u].push_back(v) ; 
                adj[v].push_back(u) ; 
        }

        dfz(1 , 1) ;
        center(1) ; 
        tim = 0 ; 
        memset(up , 0 , sizeof up) ; 
        memset(dead , 0 , sizeof dead) ; 
        dfz(1 , 1) ; 

        for(int i =1 ;i<= n;i++){
                muls[i].insert(inf) ;
        }

        scanf("%d" , &m) ; 
        for(int i = 0 ;i < m;i++){
                int u , v ;
                scanf("%d%d" , &u , &v) ; 
                if(u == 1){
                        if(ons){
                                printf("%d\n" , query(v)) ; 
                        }else{
                                printf("-1\n") ; 
                        }
                }else{
                        if(col[v]){
                                paint(v , -1) ;
                                ons-- ;  
                        }else{
                                paint(v , 1) ; 
                                ons ++ ; 
                        }
                        col[v]^= 1; 
                }
        }
        return 0 ; 
}
