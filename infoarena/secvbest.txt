/*

        Problem : infoarena secvbest
        Link : https://www.infoarena.ro/problema/secvbest
        handle : mohamedsobhi777

        Solution : 
                dp[x][y] = min split of the first y elements into x groups
                it is obvious that dp[i][j] = min(dp[i - 1][k] + abs( S - sum(k + 1 , j) ) )
                                                for k <= j
                we can implement the naiive algorithm but it would be too slow (O(K * N^2))
                we will try to improve this be grouping the indices k into two groups depending on 
                whether if we make a group [k...j], its sum will be less than s or greater than s.

                if we make group 1 for starting indices that will make the sum [k...j] greater than s, 
                and group 2, for the other values, we can see that indices go from group 2 to group 1 
                as we iterate over j
                so we can use 2 stacks to keep the minumums in both of the groups.
                        
                also we should save only the last two rows of the dp to prevent Memory Limit Exceeded verdict.

                O(N * K)
*/

#include<bits/stdc++.h>

/*
#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")*/

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 1e5 + 7 , mod = 1e9 + 7 ; 
const ll inf = 1e18 ; 
// How interesting!

int n , k , s; 
ll pref[N] ; 
ll a[N] ; 
ll dp[2][N] ;

ll Val(int l , int r){
        return pref[r] - (l ? pref[l - 1] : 0) ;
}

struct window{

        int l = 0 , r = 0 ; 
        deque<pair<int,ll>>vec ;

        void push_back(ll x){
                while(vec.size() && vec.back().second >= x){
                        vec.pop_back() ; 
                }
                vec.push_back({r ++ , x}) ;
        }

        void pop(){
                if(vec.empty())
                        return ; 
                if(l == vec.front().first){
                        vec.pop_front() ; 
                }
                l ++ ; 
        }

        ll getm(){
                if(!vec.size())
                        return 1e18 ; 
                return vec.front().second ; 
        }

} ; 


int main(){
        ios_base::sync_with_stdio(0) ;
        cin.tie(0) ; 

        freopen("secvbest.in" , "r" ,stdin) ; 
        freopen("secvbest.out" ,"w" , stdout) ;
        //freopen("in.in" , "r" , stdin) ; 
        
        cin >> n >> k >> s ; 

        for(int i = 0 ; i < n;i ++){
                cin >> a[i] ;
                pref[i] = a[i] + (i ? pref[i -1] : 0) ;
                dp[0][i] = abs (pref[i] - s) ; 
        }

        for(int j = 0 ;j < n ;j ++){
                dp[1][j] = inf ;
        }
        cout<< dp[0][n - 1] <<" " ; 

        for(int j = 2 ; j <= k ;j++){
                int r = j - 1 ; 
                window w1, w2 ;
                for(int i = j - 1 ; i < n;i ++ ){
                        w2.push_back(dp[0][i - 1] + pref[i - 1]) ;

                        while( Val(r , i) >= s && r <= i){ 
                                w1.push_back( (r ? dp[0][r - 1] - pref[r - 1] : 0) ) ; 
                                w2.pop() ; 
                                ++ r ;
                        } 
                        dp[1][i] = min(dp[1][i] , w1.getm() + pref[i] - s ) ; 
                        dp[1][i] = min(dp[1][i] , w2.getm() - pref[i] + s ) ; 
                }
                cout<< dp[1][n - 1] <<" " ; 
                for(int i = 0 ;i < n ;i ++){
                        dp[0][i] = dp[1][i];
                        dp[1][i] = 1e18 ; 
                }
        }

        return 0 ; 
}
