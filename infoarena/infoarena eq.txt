/*
        Problem : infoarena eq
        Problem Link : https://infoarena.ro/problema/eq
        handle : mohamedsobhi777

        Solution : 
                https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/CEOI/CEOI-11-Traffic.txt

*/


#include <bits/stdc++.h>

#define rot 100
using namespace std;

const int N = 1e5 + 7;

int NN = 1e8;
int n, m;
int A[N];

struct Node
{
        int mx, mn, mnp, Mnp;
        int Mpn, mpn;
        int ans1 = 0, ans0 = 0;

        void con()
        {
                ans1 = -1e9;
                ans0 = 1e9;

                mx = -1e8;
                Mpn = -1e9;
                Mnp = -1e9;

                mn = 1e9;
                mpn = 1e9;
                mnp = 1e8;
        }
        Node()
        {
                con() ; 
        }
        Node(int _vl)
        {
                con();
                mx = mn = _vl;
                ans1 = ans0  = _vl;
                Mpn = Mnp = -1e9;
                mpn = mnp = 1e9;
        }

};

Node tree[4 * N];

Node merge(Node A, Node B)
{
        Node ret = Node();
        ret.mn = min(A.mn, B.mn);
        ret.mx = max(A.mx, B.mx);

        ret.mnp = min(A.mnp, B.mnp);
        ret.Mnp = max(A.Mnp, B.Mnp);

        ret.mnp = min(ret.mnp, -A.mx + B.mn);
        ret.Mnp = max(ret.Mnp, -A.mn + B.mx);

        ret.mpn = min(A.mpn, B.mpn);
        ret.mpn = min(ret.mpn, A.mn + B.mpn);
        ret.mpn = min(ret.mpn, A.mpn + B.mn);

        ret.Mpn = max(A.Mpn, B.Mpn);
        ret.Mpn = max(ret.Mpn, A.mx - B.mn);

        ret.mpn = min(A.mpn, B.mpn);
        ret.mpn = min(ret.mpn, A.mn - B.mx);

        ret.ans1 = max(A.ans1, B.ans1);
        ret.ans1 = max(ret.ans1, 2 * A.mx - B.mn);
        ret.ans1 = max(ret.ans1, A.mx + B.Mnp);
        ret.ans1 = max(ret.ans1, A.Mpn + B.mx);

        ret.ans0 = min(A.ans0, B.ans0);
        ret.ans0 = min(ret.ans0, 2 * A.mn - B.mx);
        ret.ans0 = min(ret.ans0, A.mn + B.mnp);
        ret.ans0 = min(ret.ans0, A.mpn + B.mn);

        return ret;
}

Node query(int node, int L, int R, int l, int r)
{
        if (l > R || r < L)
        {
                return Node();
        }
        if (L >= l && R <= r)
        {
                return tree[node];
        }
        int mid = (L + R) >> 1;

        Node n1 = query(node * 2 + 1, L, mid, l, r);
        Node n2 = query(node * 2 + 2, mid + 1, R, l, r);
        return merge(n1, n2);
}

void update(int node, int L, int R, int ix, int val)
{
        if (L == R)
        {
                tree[node] = Node(val);
                return;
        }

        int mid = (L + R) / 2;

        if (ix <= mid)
        {
                update(node * 2 + 1, L, mid, ix, val);
        }
        else
        {
                update(node * 2 + 2, mid + 1, R, ix, val);
        }
        tree[node] = merge(tree[node * 2 + 1], tree[node * 2 + 2]);
}

int main()
{
        ios_base::sync_with_stdio(0);
        cin.tie(0);

        freopen("eq.in", "r", stdin);
        freopen("eq.out", "w", stdout);
        cin >> n >> m;

        for (int i = 1; i <= n; i++)
        {
                int x;
                cin >> x;
                update(0, 1, N, i, x);
        }

        for (int i = 0; i < m; i++)
        {
                int a, b;
                cin >> a >> b;
                Node ans = query(0 , 1, N , a , b) ; 
                cout<< ans.ans0 + ans.ans1 <<"\n" ; 
        }

        return 0;
}
