#include<bits/stdc++.h>

/*
#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")*/

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>
#define pii pair<int,int>
#define pll pair<ll,ll>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 1e5 + 7 , mod = 1e9 + 7 ; 
const int inf = N ; 
// How interesting!

ll n , m, ans ; 
ll a[N] ; 
int R[N] ; 

ll pref[N] , ipref[N] ; 
ll val[N] ; 

ll get(int l, int r){
        return pref[r] - (l ? pref[l - 1] : 0) ; 
}

ll calc(int i){
        return 1ll * (a[i]) * (R[i] - i) - get(i , R[i] - 1) ;
}

int main(){
        ios_base::sync_with_stdio(0) ;
        cin.tie(0) ; 
        //freopen("in.in" , "r" , stdin) ; 

        cin >> n >> m; 

        for(int i = 0 ;i < n; ++ i){
                cin >> a[i] ; 
                pref[i] = a[i] + (i ? pref[i - 1] : 0 ) ; 
        }
        stack<int> st ; 
        for(int i = 0 ;i < n;i ++){
                while(st.size() && a[st.top()] <= a[i]){
                        R[st.top()] = i ; 
                        st.pop() ;
                }
                st.push(i) ; 
        }

        while(st.size()){
                R[st.top()] = n; 
                st.pop() ; 
        }
        int prv = 0 ; 
        deque<int> dq ; 
        ll sum = 0 ; 
        dq.push_back(n) ;
        a[n] = - 1 ; 
        int lst = n; 

        for(int i = n - 1; ~ i ; -- i){
                while(dq.size() && a[dq.front()] < a[i]){
                        sum -= val[dq.front()] ; 
                        dq.pop_front() ;
                }
                ll now = calc(i) ; 
                sum += now ; 
                val[i] = now ; 
                dq.push_front(i) ; 
                while(sum - val[dq.back()] > m){ 
                        sum -= val[dq.back()] ;
                        dq.pop_back() ; 
                }
                lst = min(lst , R[dq.back()] - 1) ; 
                while(sum > m){
                        int j = dq.back() ; 
                        R[j] -- ; 
                        lst = R[j] - 1; 
                        sum -= val[j] ; 
                        val[j] = calc(j) ; 
                        sum += val[j] ; 
                }
                int far = dq.back() ;
                ans += lst - i + 1; 
        }

        cout<< ans ; 
        return 0 ; 
}
